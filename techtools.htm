<head>
	<script src="lib/jquery/jquery-3.3.1.min.js"></script>

	<script src="lib/popper.min.js"></script>
	<script src="lib/bootstrap/js/bootstrap.min.js"></script>
	<link href="lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
	<title>TechTools by Simon Tan</title>
	<meta http-equiv="x-ua-compatible" content="IE=11">

	<style>
		.c{text-align:center}
		.h{display:none}
		.c{ text-align: center}
		.va{ vertical-align: middle}
		td{border:solid 1px red}
		.h100{height:100%}
		.w100{width:100%}
		.w50{width:50%}
		form label{ float: left; clear: left; width: 15%; text-align: right; padding-right:5px}
		form input { float: left; width:75% }
		form div{width:75%}
		.bolder { font-weight: bolder}
		.actionName{ margin-left: 10px}
		fieldset img{padding-bottom: 5px}
		#preview{width:100%}
		#out{padding:15px;
			height:250px;
			width:98%;
			float:left;
		}
		#btnSave{float:right; width:30%}

		/* Clearable text inputs */
		.clearable{
			position: relative;
			display: inline-block;
		}
		.clearable input[type=text]{
			padding-right: 24px;
			width: 100%;
			box-sizing: border-box;
		}
		.clearable__clear{
			display: none;
			position: absolute;
			right:0; top:0;
			padding: 0 8px;
			font-style: normal;
			font-size: 1.2em;
			user-select: none;
			cursor: pointer;
			color:red;
		}
		.clearable input::-ms-clear {  /* Remove IE default X */
			display: none;
		}
	</style>
</head>

<html>
	<body>
		<button id=gremlin onclick="run_gremlins()">Gremlin</button>
		<table class="w100 h100">
			<tr><td style="width:50%">
				<div style="padding: 0px 10px; overflow: auto; height:270px;">
					<span class="clearable">
						<input id=search type="text" value="" placeholder="Search">
						<i class="clearable__clear">&times;</i>
					</span>
					<div id=tree></div>
				</div>
			</td><td>
				<fieldset class="h100">
					<legend>Description</legend>
					<span id=desc class=w100></span>
				</fieldset>
			</td></tr>
			<tr>
				<td class=c>
					Host(s):
					<span class="clearable">
						<input id=host><i class="clearable__clear">&times;</i>
					</span>
					<span class="clearable"></span>
					Parameters:
					<span class="clearable">
						<input id=param><i class="clearable__clear">&times;</i>
					</span>
				</td>
				<td>
					<button type=button class=btn id=run><u>R</u>un</button>
					<button type=button class=btn id=remote>Re<u>m</u>otely</button>
					<button type=button class=btn id=optimize><u>O</u>ptimize</button>
					<div class="btn-group">
						<button type="button" id=quickTools class="btn btn-danger">Action</button>
						<button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
							<span class="sr-only">Toggle Dropdown</span>
						</button>
						<p class="dropdown-menu">
						</p>
					</div>
				</td>
			</tr>
			<tr><td colspan=2><fieldset><legend>Preview Command</legend><textarea id=preview></textarea></fieldset></td></tr>
			<tr class="h100"><td colspan=2 class="h100">
				<fieldset class="h100">
					<div style="position:relative; float:right">
						<img id="copy" src="images/copy-lite.png"><br>
						<img id="save_output" src="images/save-lite.png"><br>
						<img id="clear" src="images/clear-lite.png">
					</div>
					<legend>Output</legend>
					<textarea id=out></textarea>
				</fieldset>
			</td></tr>
			<tr><td colspan=2>
				<div class="c vc">TechTools by Simon Tan.Free for personal use. For commercial use, please see <a href="http://github.io/simon1tan/techtools/license.htm" class=external target=_blank>license</a>.</div>
			</td></tr>
		</table>
		<input id="file-input" type="file" name="text" style="display: none;
" />
	</body>
</html>
<script src="lib/quicksort.min.js"></script>
<script src="lib/jstree/jstree.min.js"></script>
<link rel="stylesheet" href="lib/jstree/themes/default/style.min.css" />

<script src="lib/jsonQ.min.js"></script>
<!-- <script src="lib/jquery/jquery-ui-1.12.1/jquery-ui.min.js"></script>
<link type="text/css" rel="stylesheet" href="lib/jquery/jquery-ui-1.12.1/css/ui-darkness/jquery-ui.min.css"  media="screen,projection"/> -->
<script src="lib/jquery/jquery.color-2.1.2.min.js"></script>
<script src="lib/jwerty.min.js"></script>
<script src="lib/jquery.dirrty.min.js"></script>

<script src="lib/utils.js"></script>
<script>
var bDebug = false

function readFile(filename){
	var ForReading = 1, ForWriting = 2, ForAppending = 8;

	var TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0;

	var fso = new ActiveXObject("Scripting.FileSystemObject")
	if (!fso.fileExists(filename)) {
		// $('#desc').html("FILE DONT EXIST!");

		return(false)
	} else {
		s = ''
		f = fso.GetFile(filename);

		var stream = f.OpenAsTextStream(ForReading, TristateUseDefault)
		while ( !stream.AtEndOfStream  ) {
			s = s + stream.readline() + "\n"
		}
		stream.close()
		return(s)
	}
}

function really_go(host, action, remote, cmdline){	// replace host
	while(action.includes("@")){
		action = action.replace("@", host)
	}

	if(remote){
		if(host == ""){
			log("Remote host must be filled in.")
			blink_element($("#host"))
			return(false)
		}else{
			action = config.remote + " \\\\" + host + " " + action
		}
	}

	log(action)
}

function go(hosts, action, remote){
	// if require host but none specified
	hosts = trim_char(hosts.trim(),",") //remove any trailing commas
	if (action.includes("@") && hosts.trim() == ""){
		log("Please enter a host")
		blink_element($("#host"))
		return(false)
	}

	// check to see if command line executable
	cmdline = false
	if (action[0]==="#"){
		cmdline = true
		action = action.substring(2.-1)//remove any trailing commas
	}

	// check that host does not contain @
	if(hosts.includes("@")){
		log("Host may not contain @")
		blink_element($("#host"))
		return(false)
	}

	// process process single or multiple hosts
	if(action.includes("@")){
		if( hosts.includes(",")){
			hosts = hosts.split(",")
			$.each(hosts, function(i, host){
				really_go(host.trim(), action, remote, cmdline)
			})
			return(true)
		}
	}

	really_go(hosts.trim(), action, remote, cmdline)
}

function debug(text) {
	if(bDebug){
		log(text)
	}
}

function log(text){
	d = new Date
	$('#out').val(d.toUTCString() + ": " + text + "\n=============================================================\n" + $('#out').val() )
}

function show_desc(){
	node = jstree.jstree(true).get_selected(true)
	node = node[0]
	s = ""
	if (node.text){
		s += node.text  + "<br>"
	}
	if (node.data.cmd){
		s += "Command: " + node.data.cmd + "<br>"
	}
	if (node.data.param){
		s += "Paramenters: " + node.data.param + "<br>"
	}
	if (node.data.desc){
		s += "Description: " +  node.data.desc + "<br>"
	}
	if (node.data.www){
		s += "Web: <a href=\""+ node.data.www +"\" class=external target=_blank>" + node.data.www + "</a><br>"
	}
	if (node.data.url){
		s += "File: <a href=\""+ node.data.url +"\" class=external target=_blank>" + node.data.url + "</a><br>"
	}
	if (node.data.license){
		s += "License: " + node.data.license + "<br>"
	}

	if(s == ""){
		$("#desc").html("No details to show")
	}else{
		$("#desc").html(s)
	}
}

function show_edit(id, text, parent, cmd, param, desc, www, license, url){
	// clean undefined
	license = (license) ? encode(license) : ''
	url = (url) ? encode(url) : ''
	param = (param) ? encode(param) : ''
	www = (www) ?  encode(www) : ''
	cmd = (cmd) ?  encode(cmd) : ''
	desc = (desc) ?  encode(desc) : ''

	$("#desc").html("<form id=form_tool><input type=hidden id=parent value='" + parent + "'><label>Name:</label><input id=text value='" + text +"'><label>Description:</label><input id=desc1 value='"+ desc +"'><label>Command:</label><input id=cmd value='"+ cmd +"'><label>Parameters:</label><input id=param1 value='"+ param +"'><label>WWW:</label><input id=www value='"+ www +"'><label>License:</label><input id=license value='"+ license +"'><label>URL:</label><input id=url value='"+ url +"'><div><input id=btnCancel type=\"button\" value=Cancel onclick=\"show_desc()\" style=\"width:30%;margin-left:60px\"><input disabled type=button id=btnSave onclick=\"save_edit(this.form)\" value=Save></div></form>")

	$("#text").focus()
	$("#text").select()

	$('#form_tool').dirrty({
		preventLeaving: false
	}).on("dirty", function() {
		$("#btnSave").prop('disabled', false);
	}).on("clean", function() {
		$("#btnSave").prop('disabled', true);
	});
}

function save_edit(f){
	// make sure data is not empty
	if (!$("#form_tool").dirrty("isDirty")) {
		log("No changes to save")
		return(false)
	}

	if( (f.cmd.value === "") || (f.text.value === "")){
		log("Name and Command must be filled in")
		return(false)
	}

	obj = {}
	obj.id = f.parent.value.trim() + "-" + f.text.value.trim()
	obj.text = f.text.value.trim()
	obj.data = {}
	obj.data.cmd = f.cmd.value.trim()
	obj.data.param = f.param1.value.trim()
	obj.data.desc = f.desc1.value.trim()
	obj.data.www = f.www.value.trim()
	obj.data.url = f.url.value.trim()
	obj.data.license = f.license.value.trim()

	// check if text already exists,
	// will always exist if changing other fields and trying to save.
	selected_node = jstree.jstree(true).get_selected(true)
	if(selected_node[0].text !== obj.text ){ // name changed, check to see if any duplicates

		json = jstree.jstree(true).get_json(f.parent.value, {flat:true})
		texts = jsonQ(json).find("text").value()

		if( $.inArray(obj.text, texts ) > -1 ){
			log("Name conflicts with existing node. Must be unique.")
			blink_element($("#text"))
			return(false)
		}
	}

	log("Saved " + obj.text)

	// replace old object
	selected_node[0].data = obj.data
	jstree.jstree(true).set_text(selected_node[0], obj.text)
	set_id(selected_node[0], obj.id)

	show_desc()
	show_preview(selected_node[0])

	// Write to file
	// node = jstree.jstree(true).get_node(node.parent, true)
	write_category(selected_node.parent)

}

function encode(str){
	str = str.replace(/'/igm,"&apos;")
	return(str)
}

function check_duplicate_text(node, match){
	var check = false
	$.each(node.children, function (index, text) {
		n = jstree.jstree(true).get_node(text)
		if (n.text === match){
			check = true
			return ( check )
		}
	});
	return(check)
}

// writes category file upon changes to the category or tool
function write_category(parent){
	json = jstree.jstree(true).get_json( parent,{flat:true} )
	json.shift() // get rid of 1st one which is the parent

	// clean object by removing unwanted properties
	container = []
	$.each(json, function(i, obj){
		new_obj = {}
		new_obj.text = obj.text
		new_obj.cmd = obj.data.cmd
		new_obj.desc = obj.data.desc
		new_obj.www = obj.data.www
		new_obj.license = obj.data.license
		new_obj.url = obj.data.url
		new_obj.param = obj.data.param
		container.push(new_obj)
	})

	// writeFile(parent + ".json", JSON.stringify( container ))
	debug("Write category: " + parent + ".json")
}

function update_children_ids(new_id){
	// change all children ids to match
	json = jstree.jstree(true).get_json( new_id, {flat:true} )
	if( (json == false) || (json.length < 2)){
		log("Nothing to update: "+new_id)
		return(false)
	}

	debug("update_children_ids: " + new_id)
	json.shift()
	$.each(json, function(i, node){
		node = jstree.jstree(true).get_node( node.id )
		set_id(node,  node.parent +"-"+ node.text )
	})
}

function set_id(node, new_id){
	anchor = new_id + "_anchor"

	$("#" + fix_jquery_selector(node.id) + "_anchor").attr("id", anchor)
	$("#" + fix_jquery_selector(node.id)).attr("aria-labelledby", anchor)
	node.a_attr.id = anchor
	jstree.jstree(true).set_id(node, new_id )

}

function delete_node(node){
		switch(node.type){
			case "0":
				log("Not allowed to delete root")
				break
			case "1": // delete category
				answer = confirm('Really delete category?')
				if(answer){
					jstree.jstree('delete_node', node);

					// remove from settings.json
					index = $.inArray(node.text, config.categories)
					config.categories.splice(index, 1)
					// writeFile("settings.json", stringify(config ) )
					debug("Write File 1: " + "settings.json")

					// delete file
					// fso.DeleteFile(node.text + ".json")

					// writeFile(parent + ".json", stringify( container ))
					$("#desc").html('')
				}
				break
			case "2": // delete tool
				answer = confirm('Really delete tool?')
				if(answer){
					jstree.jstree('delete_node', node);

					// write_category(node.id)
					debug("Write file: " + node.parent + ".json")
					$("#desc").html('')
				}
				break
		}

}

// var jstree = null // make jstree global
var last_clicked = null //used remove bolder
var creating_node = false //used to differentiate creating or editing
var node_type = null

$(document).ready(function(){

	$('#desc').html('') // clear this
	// Read config file
	config = {
		"default_category":"software",
		"categories": ["vm", "ad", "av", "debug", "drivers", "config", "hardware", "mac", "net", "office", "registry", "server", "software"],
		"sort_categories": true,
		"sort_tools": true,
		"replacement_char": "#",
		"remote": "psexec64.exe",
		"optimize": "wscript.exe optimize.vbs"
	}

	// sort categories
	if (config.sort_categories){
		config.categories = config.categories.quickSort()
	}

	// config.categories = JSON.stringify(config.categories)
	// $('#desc').html( config.categories )

	config.default = "ad"
	// add roots
	// tree = [{"text":"TechTools"}]
	cats = []
	$.each(config.categories, function(i, cat){
		cats.push( {
			"id": cat,
			// "parent": val,
			"text":cat,
			"type":"1",
			"data":{ "previous_text":cat }, //used to keep track of old name for renaming files
			"children":[]
		})
	})

	cats[0].children = [
		{"cmd":"netsh firewall add portopening # # #","text":"Add Firewall Port Exception([TCP\/UDP, port,name])","desc":"","www":"","license":"","url":"","param":""},
		{"cmd":"netsh interface ip set address name=\"#\" static # # # 1","text":"Config ip(InterfaceName , ip, netmask, gateway)","desc":"Configure static ip(interfacename = Local Area Connection)","www":"","license":"","url":"","param":""},
		{"cmd":"netsetman","text":"NetSetMan","desc":"Create and switch network profiles","www":"https://www.netsetman.com/en/freeware","license":"Home and Pro","url":"","param":""},
		{"cmd":"CloseTheDoor","text":"CloseTheDoor","desc":"identifies the listening ports for TCP/UDP over IPv4/v6 and the associated program files","www":"https://sourceforge.net/projects/closethedoor/files/","license":"","url":"","param":""},
		{"cmd":"tools\\net\\pspingClient.bat","text":"pspingServer","desc":"network bandwidth test","www":"","license":"","url":"","param":""},
		{"cmd":"cscript \\networking\\scripts\\netswitch.vbs \"#\" \"#\"","text":"Disable wireless","desc":"Disable wireless when ethernet is connected","param":"wired ethernet name, wireless name","www":"","license":"","url":""},
		{"cmd":"netsh interface set interface \"#\" #","text":"Disable network adapter","desc":"(adpater name, ENABLED/DISABLED) VirtualBox Host-Only Network, ENABLED","www":"","license":"","url":"","param":""},
		{"cmd":"netsh wlan show filters","text":"Show filtered wifi networks","desc":"","www":"","license":"","url":"","param":""},
		{"cmd":"netsh interface ip set wins \"#\" static ","text":"Config/WINS","desc":"","param":"interfacename, ip address","www":"","license":"","url":""}
	]

	$.each(cats[0].children, function(i, tool){
		cats[0].children[i].id = "ad" +  "-" + tool.text
		cats[0].children[i].text=tool.text
		cats[0].children[i].type="2"
		cats[0].children[i].data = {"desc": tool.desc, "www": tool.www, "license":tool.license, "url":tool.url, "param":tool.param, "cmd":tool.cmd, "previous_text":tool.text}
	})

	cats[1].children = [
		{ "cmd":"#pslist.exe #", "text":"pslist", "desc":"", "www":"", "license":""},{ "cmd":"uvk.exe", "text":"Ultra Virus Killer", "desc":"Malware remotool and system repair multi-tool. Process manager, manage startup, scheduled tasks, services, drivers", "www":"http://www.carifred.com/uvk/", "license":"free and commercial versions"}
	]

	$.each(cats[1].children, function(i, tool){
		cats[1].children[i].id= "av" +  "-" + tool.text
		cats[1].children[i].text=tool.text
		cats[1].children[i].type="2"
		cats[1].children[i].data = {"desc": tool.desc, "www": tool.www, "license":tool.license, "url":tool.url, "param":tool.param, "cmd":tool.cmd, "previous_text":tool.text}
	})

	cats[2].children = [
		{"cmd":"reg.exe \/import \"config\\registry\\disable open file warning.reg\"","text":"disable open file warning", "desc":"Disable warnings when opening file","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import config\\registry\\FixVBSFileAssociationsVista.reg","text":"FixVBSFileAssociationsVista", "desc":"Fix VBScript file association (Vista)","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import config\\registry\\FixVBSFileAssociationsXP.reg","text":"FixVBSFileAssociationsXP", "desc":"Fix VBScript file association (XP)","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import \"config\\registry\\open with scite.reg\"","text":"open with scite", "desc":"Creates context menu to open any file with Scite","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import \"config\\registry\\open with VSCode.reg\"","text":"open with VSCode", "desc":"Create context menu to open any file with VSCode","www":"","license":"","url":"","param":""},
		{"cmd":"copy \"config\\shortcuts\\Microsoft Word.lnk\" c:\\Users\\All Users\\","text":"Microsoft Word.lnk", "desc":"Microsoft Word","www":"","destination":""}
	]

	$.each(cats[2].children, function(i, tool){
		cats[2].children[i].id= "config" +  "-" + tool.text
		cats[2].children[i].text=tool.text
		cats[2].children[i].type="2"
		cats[2].children[i].data = {"desc": tool.desc, "www": tool.www, "license":tool.license, "url":tool.url, "param":tool.param, "cmd":tool.cmd, "previous_text":tool.text}
	})

	cats[3].children = [
		{"cmd":"reg.exe \/import \"config\\registry\\disable open file warning.reg\"","text":"disable open file warning", "desc":"Disable warnings when opening file","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import config\\registry\\FixVBSFileAssociationsVista.reg","text":"FixVBSFileAssociationsVista", "desc":"Fix VBScript file association (Vista)","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import config\\registry\\FixVBSFileAssociationsXP.reg","text":"FixVBSFileAssociationsXP", "desc":"Fix VBScript file association (XP)","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import \"config\\registry\\open with scite.reg\"","text":"open with scite", "desc":"Creates context menu to open any file with Scite","www":"","license":"","url":"","param":""},
		{"cmd":"reg.exe \/import \"config\\registry\\open with VSCode.reg\"","text":"open with VSCode", "desc":"Create context menu to open any file with VSCode","www":"","license":"","url":"","param":""},
		{"cmd":"copy \"config\\shortcuts\\Microsoft Word.lnk\" c:\\Users\\All Users","text":"Microsoft Word.lnk", "desc":"Microsoft Word","www":"","destination":""}
	]

	$.each(cats[3].children, function(i, val){
		cats[3].children[i].id= "debug" +  "-" + val.text
		cats[3].children[i].text=val.text
		cats[3].children[i].type="2"
		cats[3].children[i].data = {"desc": val.desc, "www": val.www, "license":val.license, "url":val.url, "param":val.param, "cmd":val.cmd, "previous_text":val.text}
	})

	jsonQ.settings.sort.caseIgnore=true;
	cats = jsonQ(cats).sort('text').jsonQ_root

	// debug(JSON.stringify(tree))

	// put root here because jsonQ sorting messes this up
	jsondata = [{
			"id": "0"
			, "text": "TechTools"
			, "type": "0"
			, "state":{"opened":true}
			, "children":cats
			, "data":{ "disable_close":true }
			,"_disabled": true
	}]

	// debug(JSON.stringify(tree))
	jstree = $('#tree').jstree({
		"core" : {
			// keyboard:{"up":function(e){
			// 	// alert("up")
			// 	current_node = jstree.jstree(true).get_selected(true)
			// 	upper_node = jstree.jstree(true).get_prev_dom(current_node[0])
			// 	jstree.jstree(true).deselect_node(current_node[0])
			// 	jstree.jstree(true).select_node(upper_node[0], false, true)
			// 	// jstree.jstree(true).get_node(upper_node[0].id, true).focus()
			// }},
			// "check_callback" : true,
			'check_callback' : function (operation, node, node_parent, node_position, more) {
				// Prevent renaming of root node
				if(operation=='rename_node' && node.type==="0"){
					log("Renaming of root node is not allowed")
					return false
				}else{
					return true
				}
		 	}
			,"multiple" : false
			, "dblclick_toggle" : false
			, "animation" : 0
			, "themes" : { "stripes" : true }
			, "initially_open" : "ad"
			,'data' : jsondata
		}
		, "plugins" : [ "unique", "search", "contextmenu", "types", "wholerow"] // sort plugin will sort newly created nodes
		, 'contextmenu' : {
			"items": function(node) {
				right_click = true
				debug("contextmenu")
				if(node.type==="0"){
					return{
						"Create": { // Create Category
							"separator_before": false,
							"separator_after": false,
							"label": "Create",
							"action": function (obj) {
								creating_node = true
								node_type = "1"
								duplicate = true
								i = 0
								while(duplicate){
									text = "New Category"
									if (i>0){
										text += " " + i
									}
									if (check_duplicate_text(node, text) == true){
										i++
									}else{
										duplicate = false

										new_obj = {"id":node.id+"-"+text, "text": text, "type":"1", "parent":"0", "children":[], data:{ "previous_text":text }}
										node = jstree.jstree("create_node", node.id, new_obj, "first"); // create node under "1"

										// add to config
										config.categories.unshift(text)
										// writeFile("settings.json", stringify(config, {maxLength:500}))
										debug("Write File: " + "settings.json")
										// debug(stringify(config, {maxLength:500}))

										// create new empty file
										debug("Create Empty File: " + text + ".json")
										// writeFile(text + ".json", "")
										// debug("Write File: " + text + ".json")
										// debug(stringify(config, {maxLength:500}))

										jstree.jstree('edit', new_obj.id, false);
									}
								}
							}
						}
					}
				}else if(node.type==="1"){
					return {
						"Create": { // Create Tool
							"separator_before": false,
							"separator_after": false,
							"label": "Create",
							"action": function (obj) {
								node_type = "2"
								creating_node = true

								// check that text is not duplicated. search all children
								duplicate = true
								i = 0
								while(duplicate){
									text = "New Tool"
									if (i>0){
										text += " " + i
									}
									if (check_duplicate_text(node, text) == true){
										i++
									}else{
										duplicate = false

										new_obj = {"id": node.id +"-" + text , "text": text, "type":"2", "parent":node.parent, data:{"cmd":text,"desc":"","www":"","license":"","url":"","param":"", "previous_text":text}}
										node_id = jstree.jstree("create_node", node.id, new_obj, "first");

										// write tool to file
										// json = jstree.jstree(true).get_json(node.id,{flat:true})
										// json.shift() // get rid of 1st one which is the parent

										// write_category(node.id)
										// index = jsonQ.index(json, {"id":node.parent}, true)

										// writeFile(node.id + ".json", stringify( container ))
										debug("Write File: " + node.id + ".json")
										// debug(stringify( container ))

										// jstree.jstree('edit', node_id, false);
										show_preview(new_obj)
									}
								}
							}
						},
						"Rename": { // rename category
							"separator_before": false,
							"separator_after": false,
							"label": "Rename",
							"action": function (obj) {
								jstree.jstree('edit', node);

								// save setting
							}
						},
						"Delete": { // Delete category
							"separator_before": false,
							"separator_after": false,
							"label": "Delete",
							"action": function (obj) {
								delete_node(node)
							}
						}
					};
				}else{ // 2
					return {
						"Edit": { // Edit tool
							"separator_before": false,
							"separator_after": false,
							"label": "Edit",
							"action": function (obj) {
								show_edit(node.id, node.text, node.parent, node.data.cmd, node.data.desc, node.data.www, node.data.license, node.data.url)
							}
						},
						"Delete": { // Delete tool
							"separator_before": false,
							"separator_after": false,
							"label": "Delete",
							"action": function (obj) {
								delete_node(node)
							}
						}
					};
				}
			}
		}
		, "types" : {
			"0" : {
				"max_children" : 1
				// , "max_depth" : 0
				// , "valid_children" : ["1"] // prevents creation
			},
			"1" :{
				// "max_children" : 1
				// , "max_depth" : 2
				// , "valid_children" : ["2"]
			},
			"2":{
				// "max_children" : 0
				// , "max_depth" : 0
				// , "create_node" : false
			}
		}
	})
	// jstree.jstree(true).get_json('0',{flat:true})

	// order of operations: select_node, contextmenu, click
	// select_node, context, create, rename
	// if node already select, this does not triggers
	// jstree.on("select_node.jstree", function (e, data) {});

	jstree.on("create_node.jstree", function(e, data){
		debug("create_node.jstree")

		if(data.node.type=="2"){ // tool
			show_edit( data.node.id, data.node.text, data.node.parent, data.node.data.cmd, data.node.data.param, data.node.data.desc, data.node.data.www, data.node.data.license, data.node.data.url )
		}

		// select this
		jstree.jstree(true).select_node(data.node.id)
		jstree.jstree(true).deselect_node(data.node.parent)
		// $(".jstree-clicked").removeClass("jstree-clicked") //remove all other highlighted after creating node!
	})

	// jstree.on("changed.jstree", function(e, data){ })

	// triggered when creating category and tool
	jstree.on("rename_node.jstree", function(e, data){
		var node = data.node //$.extend(true, {}, data.node);

		if(node.text === node.data.previous_text){ // nothing changed
			log("Nothing changed")
			return(false)
		}

		if(node.type==="0"){
			log("Renaming root is not allowed")
			jwerty.fire('escape','#tree','body')
			return(false)
		}

		debug("rename_node.jstree")

		creating_node = false

		// node.text already changed!
		if( node.type ==="1"){  // rename category

			// update settings file and save
			cat_index = $.inArray(node.data.previous_text, config.categories)
			config.categories[cat_index] = node.text
			// writeFile("settings.json", stringify(config, {maxLength:500}))
			debug("Update settings.json")


			// rename file
			// fso.MoveFile(node.data.previous_text + ".json", node.text + ".json")
			// if(node.text != node.data.previous_text){
			debug("Move File:" + node.data.previous_text + ".json, " + node.text + ".json")
			// }else{
			// 	debug("Move File not needed")
			// }

			set_id(node, node.parent + "-" + node.text )
			node.data.previous_text = node.text

			// change all children ids to match
			update_children_ids( node.text )
		}else if( node.type==="2"){ // tool
			// new_text = node.parent + "-" + new_text

			set_id(node,  node.parent+'-'+node.text )

			// save tools
			// json = jstree.jstree(true).get_json( node.parent, { flat:false } ).children

			// writeFile(node.parent, )
			debug("Write tool 2: " )
			// $.each(jsondata[0].children, function(i, cat){
			// 	if( cat.id === node.parent ){
			// 		// find tool index

					// j = jsonQ(jsondata)
					// j.setPathValue( [0, "children", i, "children", j, "text"], node.text)

					// debug("Write tool 2: " + obj.id)

			// 		return(false)
			// 	}
			// })

			show_desc()
			// $('#form').isDirty = true
		}

		// $("#new_category_anchor").attr("id", node.text + "_anchor") // not sure if this does anything

		// $(".jstree-clicked").removeClass("jstree-clicked")
		// $.each(node.children, function (index, text) {
		// 	n = jstree.jstree(true).get_node(text)
		// });
		// jstree.jstree(true).deselect_node(node.parent) // parent is also selected
		// jstree.jstree(true).select_node(node.id)

		// keep node highlighted
		// $("#"+new_id).addClass("jstree-clicked")
		right_click = false
	})

	jstree.on("select_node.jstree", function (e, data) {
		// debug("node.id: " + data.node.id)
	})

	jstree.on('click', '.jstree-anchor', function (e) { // a vs td when select_node is clicked. //click has no data, need to get_node
		// debug(".jstree-anchor click")
		// clear search
		$('#search').val('')

		node_id = jstree.jstree(true).get_selected(false)
		jstree.jstree(true).toggle_node(node_id);

		var e =  window.event || event;
		var button = e.which || e.button;
		if (button == 3){ // right click
		}else{
			$("#desc").html('')

			// can't use get_node!
			node = $("#tree").jstree(true).get_node($(".jstree-clicked").attr("id"))
			if ((node.type === '2') ){ // tool
				show_desc()
				show_preview(node)
				// $("#preview").val( node.data.cmd + " " + $("#param").val())
			}
		}
		// jstree.jstree("open_node", e.target)
	})

	jstree.on('dblclick', '.jstree-anchor', function (e) { // a vs td when select_node is clicked
		nodes = jstree.jstree("get_selected", true)
		if(nodes.length > 0 ){
			if(nodes[0].type=="2"){
				show_edit( nodes[0].id, nodes[0].text, nodes[0].parent, nodes[0].data.cmd, nodes[0].data.param, nodes[0].data.desc, nodes[0].data.www, nodes[0].data.license, nodes[0].data.url )
			}
		}
	})

	jstree.on('open_node.jstree', function (e, data) {
		var nodesToKeepOpen = [];

		// get all parent nodes to keep open
		$('#'+data.node.id).parents('.jstree-node').each(function() {
		nodesToKeepOpen.push(this.id);

		});


		// add current node to keep open
		nodesToKeepOpen.push( data.node.id );


		// close all other nodes
		$('.jstree-node').each( function() {
			if( nodesToKeepOpen.indexOf(this.id) === -1 ) {
				$("#tree").jstree().close_node(this.id);

			}
		})
	})

	$("#run").on("click", function(e, remote){
		remote = (remote || false)

		if($("#preview").val().trim() ===""){
			log("Nothing to run")
			return(false)
		}

		// node = jstree.jstree(true).get_selected(true)[0]
		// if(!node || node.type==="0" || node.type==="1"){
		// 	log("Select a tool first")
		// 	return(false)
		// }

		// check param for #
		param = $("#param").val().trim()
		if(param.includes("#")){
			log("Param should not have #")
			blink_element($("#param"))
			return(false)
		}

		// check host for @
		if($("#host").val().includes("@")){
			log("Host should not have @")
			blink_element($("#host"))
			return(false)
		}

		// params_entered = $("#param").val().split(",")
		params_entered = (param === "") ? [] : param.split(",").map(function(item) {
  			return item.trim();
		}); // this returns 1 if param is empty!

		params_entered = params_entered.filter(Boolean) // remove empty strings from array

		node = jstree.jstree(true).get_selected(true)[0]
		if(node){

			action = node.data.cmd
			// check for command line output
			action = (action[0]==="#") ? action = action.substring(2.-1) : action
			needed_count = (action.match(/#/g) || []).length // or use param field and split(",")

			if( needed_count > params_entered.length){
				log("Not enough parameters")
				blink_element($("#param"))
				return (false)
			}
		}

		go($('#host').val(), $("#preview").val(), remote)

	})

	$("#remote").on("click", function(e){
		$("#run").trigger("click", true)
	})

	$("#param").on("keyup", function () {
		node = jstree.jstree("get_selected", true)
		show_preview(node[0])
	})

	$("#optimize").on("click", function(e){
		really_go('', config.optimize, '', false)
	})

	// save output
	$(".save_output").on("click", function(){
		$('#file-input').trigger('click');

	})

	$("#clear").on("click", function(){
		$("#out").val('')
	})

	// search
	$('#search').on('focus', function(){
		$('#search').removeClass()
		$('#search').addClass()
	})

	var to = false;

	$('#search').keyup(function () {
		if(to) {
			clearTimeout(to);
 		}
		to = setTimeout(function () {
			var v = $('#search').val();

			$('#tree').jstree(true).search(v);

		}, 250);

	});


	// $('#out').html('Techtools by Simon Tan. Free for personal use. For commercial use, please see <a href="http://github.io/simon1tan/techtools/license.htm">license</a>.')
	$("#out").val("Loading Complete")

	// setup quick links by storing the cmd.
	quicktools = [
		{"cmd":"putty.exe @","text":"putty","default":true,"desc":"Free SSH client","www":"https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html","license":"MIT","url":"","param":""},
		{"cmd":"mstsc.exe /v:@","text":"rdp","desc":"Microsoft Remote Desktop","www":"","license":"","url":"","param":"","vendor":"Microsoft"},
		{"cmd":"tools\\admin\\vncviewer.exe @","text":"vnc","desc":"VNC","www":"","license":"","url":"","param":""},
		{"cmd":"psexec.exe \\\\@ %windir%\\system32\\cmd.exe","text":"remote cmd","desc":"Remote cmd","www":"","license":"","url":"","param":""}
	]

	$.each(quicktools, function(i, qt){
		$(".dropdown-menu").append("<a class='dropdown-item' href='#'>" + qt.text + "</a>")
		$.data($(".dropdown-item")[i], "cmd", qt.cmd)
	})

	// choose quickTools
	$(".dropdown-item").on('click', function(e){
		$("#quickTools").text($(this).text());
		$("#quickTools").val($(this).text());

		$.data(document.body, "quickTools", $.data(this, "cmd") )

		//execute
		$("#quickTools").trigger("click")
	})

	// run quickTools
	$("#quickTools").on("click", function(){
		go( $("#host").val(), $.data(document.body, "quickTools"), false)
	})

	// default quickTools
	el = $(".dropdown-item")[0]
	$("#quickTools").text(el.text);
	$("#quickTools").val(el.text);

	$("#copy").on("click", function(){
		if($("#out").val()!=""){
			copyToClipboard(  document.getElementById("out") )
		}
	})

	$.data(document.body, "quickTools", $.data(el, "cmd") )

	// open link in default browser instead of IE
	$(document).on('click', 'a[href]', function(e) {
		if( e.target.className === "external" ){
		}else{
			e.preventDefault()
		}
	})

	// *************** Hotkeys
	jwerty.key('alt+d', function (e){ // delete
		nodes = jstree.jstree(true).get_selected(true)
		delete_node(nodes[0])
	})

	jwerty.key('alt+e', function (e){ //edit
		nodes = jstree.jstree(true).get_selected(true)
		if(nodes[0].type==="1"){
			// var inst = $.jstree.reference(data.reference),
			jstree.jstree(true).edit(nodes[0]);
		}else if(nodes[0].type==="2"){
			show_edit( nodes[0].id, nodes[0].text, nodes[0].parent, nodes[0].data.cmd, nodes[0].data.param, nodes[0].data.desc, nodes[0].data.www, nodes[0].data.license, nodes[0].data.url )
		}else{
			log("Edit function not available at this time. Select a tool first.")
		}
	})

	jwerty.key('alt+m', function (e){ //run
		$("#remote").trigger("click")
	})

	jwerty.key('alt+r', function (e){ //run
		$("#run").trigger("click")
	})

	jwerty.key('alt+o', function (e){ //optimize
		$("#optimize").trigger("click")
	})

	jwerty.key('alt+q', function (e){ //run
		$("#quicktools").trigger("click")
	})

	jwerty.key('alt+s', function (e){
		if($("#form_tool").length > 0){
			$("#btnSave").trigger("click")
		}else{
			log("Edit function not available at this time. Select a tool first.")
		}
	})

	jwerty.key('alt+c', function (e){
		$("#out").val("")
	})

	jwerty.key('esc', function (e){ // escape saving in add and edit tools
		if($("#btnCancel").length > 0){
			$("#btnCancel").trigger("click")
		}
	})

	$(".clearable").each(function() {
		// https://stackoverflow.com/questions/6258521/clear-icon-inside-input-text/6258628
		var $inp = $(this).find("input:text"), $cle = $(this).find(".clearable__clear");

		$inp.on("input", function(){
			$cle.toggle(!!this.value);
		});

		$cle.on("touchstart click", function(e) {
			e.preventDefault();
			$inp.val("").trigger("input");
		});
	});
})

function show_preview(node){
	debug("show preview")

	if(node){ // no node chosen
		if(node.data.cmd == undefined){ // shouldn't happen
			return(false)
		}

		hosts = $("#host").val().trim()
		action = node.data.cmd
		if (action.includes("@") && hosts != ""){
			action.replace(/@/, hosts)
		}

		// replace the front #(capture console output)
		cmdline = false

		if(action[0]==="#"){
			action = action.substring(2.-1)
			cmdline = true
		}

		param = $("#param").val().trim()
		params = (param == "") ? [] : param.split(",").map(function(item) {
  			return item.trim();
		});

		for(var i=0; i<params.length; i++){
			if(params[i]){
				action = action.replace("#", params[i])
			}
		}

		if(cmdline){
			$("#preview").val("#" + action )
		}else{
			$("#preview").val( action )
		}
	}
}

</script>
<script src="lib/gremlins.min.js"></script>
<script>
	function run_gremlins(){
		gremlins.createHorde()
			.before(function() {
				$("#gremlin").css("display","none")
				$("#gremlin").prop('disabled', true);
			})
			.gremlin(gremlins.species.formFiller())
			// .gremlin(gremlins.species.typer()) // causes dispatch error
			.gremlin(gremlins.species.clicker().clickTypes(['click', 'dblclick']))
			.after(function(){
				$("#gremlin").css("display","block")
				$("#gremlin").prop('disabled', false);
			})

			.mogwai(gremlins.mogwais.gizmo().maxErrors(1))
			// .unleash({ nb: 10000 });
			.unleash();
	}
</script>
